{"version":3,"sources":["components/Info/info.jsx","components/form/form.jsx","components/weather/weather.jsx","API/API.js","reducers/WeatherReducer.js","App.js","serviceWorker.js","Redux/Store.js","index.js"],"names":["Info","props","ReduxForm","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","Field","component","type","name","placeholder","WeatherForm","city","getWeather","Weather","className","temp","country","sunset","humidity","error","WeatherAPI","axios","initialState","sunrise","SetData","data","App","this","React","Component","connect","state","GetWeather","then","date","Date","setTime","sys","sunsetDate","getHours","getMinutes","getSeconds","main","a","Boolean","window","location","hostname","match","reducers","combineReducers","action","FormReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kVAWeA,G,OARF,SAACC,GACV,OACI,6BACI,kJ,iCCUNC,EAAYC,YAAU,CAACC,KAAM,cAAeC,gBAH9B,SAACC,EAAQC,GAAT,OAChBA,EAASC,YAAM,kBAEDL,EAZL,SAAAF,GACT,OACI,0BAAMQ,SAAUR,EAAMS,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAU,QAAQC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC7D,8CAkBGC,EARK,SAACf,GAKjB,OAAO,kBAACC,EAAD,CAAWO,SAJH,SAACQ,GACZhB,EAAMiB,WAAWD,EAAKA,UCCfE,EAlBC,SAAClB,GACb,OACI,yBAAKmB,UAAU,aAEPnB,EAAMgB,MACN,6BACA,kGAAiBhB,EAAMoB,MACvB,8DAAWpB,EAAMgB,MACjB,oEAAYhB,EAAMqB,SAClB,mGAAkBrB,EAAMsB,QACxB,sFAAetB,EAAMuB,SAArB,MAGJ,uBAAGJ,UAAU,SAASnB,EAAMwB,S,yBCZ3BC,EAAa,SACXT,GACP,OAAOU,MAAA,4DAC+CV,EAD/C,kBAJH,mCAIG,mBCFTW,EAAe,CACjBP,KAAM,KACNJ,KAAM,KACNK,QAAS,KACTO,QAAS,KACTN,OAAQ,KACRE,MAAO,KACPD,SAAU,MAeDM,EAAU,SAACC,GACpB,MAAO,CAAClB,KAzBK,WAyBWkB,SCpBtBC,E,uKAEE,OACI,yBAAKZ,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAMF,WAAYe,KAAKhC,MAAMiB,aAC7B,kBAAC,EAAD,CACIM,SAAUS,KAAKhC,MAAMuB,SACrBH,KAAMY,KAAKhC,MAAMoB,KACjBJ,KAAMgB,KAAKhC,MAAMgB,KACjBK,QAASW,KAAKhC,MAAMqB,QACpBC,OAAQU,KAAKhC,MAAMsB,OACnBE,MAAOQ,KAAKhC,MAAMwB,iB,GAlBpCS,IAAMC,WA+DTC,eAVS,SAACC,GAAD,MAAY,CAChChB,KAAMgB,EAAMlB,QAAQE,KACpBJ,KAAMoB,EAAMlB,QAAQF,KACpBK,QAASe,EAAMlB,QAAQG,QACvBO,QAASQ,EAAMlB,QAAQU,QACvBN,OAAQc,EAAMlB,QAAQI,OACtBE,MAAOY,EAAMlB,QAAQM,MACrBD,SAAUa,EAAMlB,QAAQK,YAGY,CAACc,WDxCf,SAACrB,GAAD,OAAU,SAACV,GACjCmB,EAAsBT,GAAMsB,MAAK,SAAAR,GAC7B,IAAIS,EAAO,IAAIC,KACfD,EAAKE,QAAQX,EAAKA,KAAKY,IAAIpB,QAC3B,IAAIqB,EAAaJ,EAAKK,WAAa,IAAML,EAAKM,aAAe,IAAMN,EAAKO,aACxExC,EAASuB,EAAQ,CACbT,KAAMU,EAAKA,KAAKiB,KAAK3B,KACrBJ,KAAMc,EAAKA,KAAKjB,KAChBQ,QAASS,EAAKA,KAAKY,IAAIrB,QACvBO,QAASE,EAAKA,KAAKY,IAAId,QACvBN,OAAQqB,EACRnB,MAAO,KACPD,SAAUO,EAAKA,KAAKiB,KAAKxB,iBC4BgBM,WAAtCM,EAjCM,SAACnC,GAElB,IAAMiB,EAAU,uCAAG,WAAOD,GAAP,SAAAgC,EAAA,sDAEXhC,EACAhB,EAAMqC,WAAWrB,GAEjBhB,EAAM6B,QAAQ,CACVT,KAAM,KACNJ,KAAM,KACNK,QAAS,KACTO,QAAS,KACTN,OAAQ,KACRE,MAAO,4EACPD,SAAU,OAZH,2CAAH,sDAiBhB,OAAO,kBAAC,EAAD,iBAASvB,EAAT,CAAgBiB,WAAYA,QC5CnBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0CCbAC,EAAWC,YAAgB,CACzBrC,QHQsB,WAAmC,IAAlCkB,EAAiC,uDAAzBT,EAAc6B,EAAW,uCAC5D,OAAQA,EAAO5C,MACX,IAdS,WAeL,OAAO,2BACAwB,GACAoB,EAAO1B,MAElB,QACI,OAAOM,IGfXjC,KAAMsD,MAIVC,EAAQC,YAAYL,EAAUM,YAAgBC,MAElDX,OAAOQ,MAAQA,EAEAA,QCLfI,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,QAGRO,SAASC,eAAe,SFmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLiD,QAAQjD,MAAMA,EAAMkD,c","file":"static/js/main.2ef587e5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"./info.module.css\"\r\n\r\nconst Info = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Погода в твоем городе</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Info","import React from \"react\";\r\nimport style from \"./form.module.css\"\r\nimport {Field, reduxForm, reset} from \"redux-form\"\r\n\r\nconst Form = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component=\"input\" type=\"text\" name=\"city\" placeholder=\"city\"/>\r\n            <button>Search</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst afterSubmit = (result, dispatch) =>\r\n    dispatch(reset(\"weatherForm\"))\r\n\r\nconst ReduxForm = reduxForm({form: \"weatherForm\", onSubmitSuccess: afterSubmit})(Form)\r\n\r\nconst WeatherForm = (props) => {\r\n    let onSubmit = (city) => {\r\n        props.getWeather(city.city)\r\n    }\r\n\r\n    return <ReduxForm onSubmit={onSubmit}/>\r\n}\r\n\r\nexport default WeatherForm","import React from \"react\";\r\n//❄\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"infoWeath\">\r\n            {\r\n                props.city &&\r\n                <div>\r\n                <p>Температура: {props.temp}</p>\r\n                <p>Город: {props.city}</p>\r\n                <p>Страна: {props.country}</p>\r\n                <p>Заход солнца: {props.sunset}</p>\r\n                <p>Влажность: {props.humidity}%</p>\r\n                </div>\r\n            }\r\n            <p className=\"error\">{props.error}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather","import * as axios from \"axios\";\r\n\r\nconst API = \"785b051b4d7780be3adad788f65ce773\"\r\n\r\nexport const WeatherAPI = {\r\n    GetWeather(city)  {\r\n        return axios.get\r\n        (`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API}&units=metric`)\r\n    }\r\n}","import {WeatherAPI} from \"../API/API\";\r\n\r\nconst SET_DATA = \"SET_DATA\"\r\n\r\nconst initialState = {\r\n    temp: null,\r\n    city: null,\r\n    country: null,\r\n    sunrise: null,\r\n    sunset: null,\r\n    error: null,\r\n    humidity: null,\r\n}\r\n\r\nexport const WeatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetData = (data) => {\r\n    return {type: SET_DATA, data}\r\n}\r\n\r\nexport const GetWeather = (city) => (dispatch) => {\r\n    WeatherAPI.GetWeather(city).then(data => {\r\n        let date = new Date()\r\n        date.setTime(data.data.sys.sunset)\r\n        let sunsetDate = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds()\r\n        dispatch(SetData({\r\n            temp: data.data.main.temp,\r\n            city: data.data.name,\r\n            country: data.data.sys.country,\r\n            sunrise: data.data.sys.sunrise,\r\n            sunset: sunsetDate,\r\n            error: null,\r\n            humidity: data.data.main.humidity}))\r\n    })\r\n}\r\n\r\n\r\n","import React from \"react\";\nimport Info from \"./components/Info/info\";\nimport Form from \"./components/form/form\";\nimport Weather from \"./components/weather/weather\";\nimport {connect} from \"react-redux\";\nimport {GetWeather, SetData} from \"./reducers/WeatherReducer\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div className=\"main\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-sm-5 info\">\n                                <Info/>\n                            </div>\n                            <div className=\"col-sm-7 form\">\n                                <Form getWeather={this.props.getWeather}/>\n                                <Weather\n                                    humidity={this.props.humidity}\n                                    temp={this.props.temp}\n                                    city={this.props.city}\n                                    country={this.props.country}\n                                    sunset={this.props.sunset}\n                                    error={this.props.error}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst AppContainer = (props) => {\n\n    const getWeather = async (city) => {\n\n        if (city) {\n            props.GetWeather(city)\n        } else {\n            props.SetData({\n                temp: null,\n                city: null,\n                country: null,\n                sunrise: null,\n                sunset: null,\n                error: \"Укажите город\",\n                humidity: null,\n            })\n        }\n    }\n\n    return <App {...props} getWeather={getWeather}/>\n\n}\n\nconst mapStateToProps = (state) => ({\n    temp: state.Weather.temp,\n    city: state.Weather.city,\n    country: state.Weather.country,\n    sunrise: state.Weather.sunrise,\n    sunset: state.Weather.sunset,\n    error: state.Weather.error,\n    humidity: state.Weather.humidity\n})\n\nexport default connect(mapStateToProps, {GetWeather, SetData})(AppContainer)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware  from \"redux-thunk\";\r\nimport {WeatherReducer} from \"../reducers/WeatherReducer\";\r\nimport {reducer as FormReducer} from \"redux-form\"\r\n\r\nconst reducers = combineReducers({\r\n        Weather : WeatherReducer,\r\n        form: FormReducer,\r\n    }\r\n)\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware),)\r\n\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/Store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}